airquality
head(airquality)
install_github('rstudio/shinyapps')
library(shinyapps)
install.packages("shiny")
pwd
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
install.packages(UsingR)
data(UsingR)
install.packages("UsingR")
shiny::runApp('Dropbox/Coursera+edx/DevDataProduct/ShinyTest')
plot(ToothGrowth)
data_oj_dose05 = data_oj[data_oj$dose == 0.5]
data_oj = ToothGrowth[ToothGrowth$supp == "OJ", c("dose", "len")]
data_oj_dose05 = data_oj[data_oj$dose == 0.5]
data_oj_dose05 = data_oj[dose == 0.5]
data_oj_dose05 = data_oj["dose" == 0.5]
View(data_oj_dose05)
View(data_oj_dose05)
View(data_oj_dose05)
data_oj_dose05 = data_oj["dose" == 0.5]$len
View(data_oj)
View(data_oj)
data_oj_dose05 = data_oj["dose" == 0.5]
View(data_oj_dose05)
data_oj_dose05 = data_oj[data_oj$dose == 0.5]
data_oj_dose05 = data_oj[data_oj$dose == 0.5]
data_oj = ToothGrowth[ToothGrowth$supp == "OJ", c("dose", "len")]
data_vc = ToothGrowth[ToothGrowth$supp == "VC", c("dose", "len")]
data_oj_dose05 = data_oj[data_oj$dose == 0.5]
data_oj_dose05 = data_oj[dose == 0.5]
data_oj_dose05 = data_oj["dose" == 0.5]
View(data_oj_dose05)
data_oj_dose05 = data_oj[ToothGrowth$dose == 0.5]
data_oj_dose05 = ToothGrowth[ToothGrowth$dose == 0.5]
data_oj_dose05 = ToothGrowth[ToothGrowth$dose == 0.5,]
data_oj_dose05 = data_oj[data_oj$dose == 0.5,]
View(data_oj_dose05)
data_oj_dose05 = data_oj[data_oj$dose == 0.5,]$len
View(data_vc)
# Separate data by "supp"
data_oj = ToothGrowth[ToothGrowth$supp == "OJ", c("dose", "len")]
data_vc = ToothGrowth[ToothGrowth$supp == "VC", c("dose", "len")]
len_oj_dose05 = data_oj[data_oj$dose == 0.5,]$len
len_vc_dose05 = data_vc[data_vc$dose == 0.5,]$len
len_oj_dose10 = data_oj[data_oj$dose == 1.0,]$len
len_vc_dose10 = data_vc[data_vc$dose == 1.0,]$len
len_oj_dose20 = data_oj[data_oj$dose == 2.0,]$len
len_vc_dose20 = data_vc[data_vc$dose == 2.0,]$len
t.test(len_oj_dose05, len_vc_dose05, var.equal=F)
t.test(len_oj_dose05, len_vc_dose05, var.equal=F)
t.test(len_oj_dose10, len_vc_dose10, var.equal=F)
t.test(len_oj_dose20, len_vc_dose20, var.equal=F)
help(t.test)
t.test(len_oj_dose05, len_vc_dose05, paired = F, var.equal = F)
t.test(len_oj_dose10, len_vc_dose10, paired = F, var.equal = F)
t.test(len_oj_dose20, len_vc_dose20, paired = F, var.equal = F)
t.test(len_oj_dose20, len_oj_dose20, paired = F, var.equal = F)
t.test(len_oj_dose20, len_oj_dose20, paired = T, var.equal = T)
t.test(len_oj_dose20, len_vc_dose20, paired = T, var.equal = T)
t.test(len_oj_dose20, len_vc_dose20, paired = F, var.equal = F)
t.test(len_oj_dose05, len_vc_dose05, paired = F, var.equal = F)
t.test(len_oj_dose10, len_vc_dose10, paired = F, var.equal = F)
t.test(len_oj_dose20, len_vc_dose20, paired = F, var.equal = F)
library(AppliedPredictiveModeling)
install.packages()
library()
update.packages()
install.package("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(caret)
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training)
hist(mixtures$Superplasticizer)
log(mixtures$Superplasticizer + 1)
hist(log(mixtures$Superplasticizer + 1))
hist(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(kernlab)
install.packages("kernlab")
()
library(caret)
library(kernlab)
data(spam)
library(caret)
library(kernlab)
data(spam)
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
View(spam)
View(inTrain)
View(spam)
View(inTrain)
spam$type
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
modelFIt = train(type ~., data = training, method = "glm")
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
modelFIt = train(type ~., data = training, method = "glm")
install.packages('e1071')
# Video - SPAM Example
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
modelFIt = train(type ~., data = training, method = "glm")
warnings()
modelFIt
# Video - SPAM Example
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
modelFIt = train(type ~., data = training, method = "glm") # 一般化線形モデル
modelFIt
modelFIt = train(type ~., data = training, method = "glm") # 一般化線形モデル
modelFIt
set.seed(1235)
modelFIt = train(type ~., data = training, method = "glm") # 一般化線形モデル
modelFIt
set.seed(1235)
modelFIt = train(type ~., data = training, method = "glm") # 一般化線形モデル
modelFIt
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
prcomp(training)
training[,c("IL")]
training[,c("IL_11")]
training[grep("Width", colnames(iris), perl=T)]
training[grep("Width", colnames(training), perl=T)]
training[grep("IL", colnames(training), perl=T)]
grep("IL", colnames(training), perl=T)
grep("^IL.*$", colnames(training), perl=T)
training[grep("^IL.*$", colnames(training), perl=T)]
prcomp(training[grep("^IL.*$", colnames(training), perl=T)])
# Find all the predictor variables in the training set that begin with IL.
training_il = training[grep("^IL.*$", colnames(training), perl=T)]
# Perform principal components on these variables with the preProcess() function from the caret package.
pca = prcomp(training_il)
summary(pca)
# Find all the predictor variables in the training set that begin with IL.
training_il = training[grep("^IL.*$", colnames(training), perl=T)]
# Perform principal components on these variables with the preProcess() function from the caret package.
pca = prcomp(training_il)
summary(pca)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Find all the predictor variables in the training set that begin with IL.
training_il = training[grep("^IL.*$", colnames(training), perl=T)]
# Perform principal components on these variables with the preProcess() function from the caret package.
pca = prcomp(training_il)
summary(pca)
plot(pca)
# Quiz 2 - Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Quiz 2 - Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
head(training)
head(1,)
training[1,]
names(training)
training["IL_8"]
training[grep("^IL.*$", training)]
training[grep("^IL.*$", training, perl = T)]
training[grep("^IL.*$", colnames(training), perl = T)]
colnames(training)
training[grep("^IL.*$", colnames(training), perl = T)]
training[grep("^(IL.* | diagnosis)$", colnames(training), perl = T)]
training[grep("^(IL | diagnosis).*$", colnames(training), perl = T)]
training[grep("^[IL | diagnosis].*$", colnames(training), perl = T)]
training[grep("^IL.*$", colnames(training), perl = T)]
training[grep("^diagnosis.*$", colnames(training), perl = T)]
training$diagnosis
training[grep("^IL.*$", colnames(training), perl = T)]
diagnosis = training["diagnosis"]
View(diagnosis)
il = training[grep("^IL.*$", colnames(training), perl = T)]
diagnosis = training["diagnosis"]
View(il)
View(diagnosis)
View(il)
# Quiz 2 - Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il = training[grep("^IL.*$", colnames(training), perl = T)]
diagnosis = training["diagnosis"]
# Quiz 2 - Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il = training[grep("^IL.*$", colnames(training), perl = T)]
diagnosis = training["diagnosis"]
pca = prcomp(il)
summary(pca)
glm(diagnosis ~ il)
glm(training$diagnosis ~ il)
pca
pca$PC1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
# Quiz 2 - Question 1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
diagnosis
# Quiz 2 - Question 1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
# Quiz 2 - Question 1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
# Quiz 2 - Question 3
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Find all the predictor variables in the training set that begin with IL.
training_il = training[grep("^IL.*$", colnames(training), perl=T)]
# Perform principal components on these variables with the preProcess() function from the caret package.
pca = prcomp(training_il)
summary(pca)
preProcess(training_il, method="pca", thresh=0.90)
# Quiz 2 - Question 3
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Find all the predictor variables in the training set that begin with IL.
training_il = training[grep("^IL.*$", colnames(training), perl=T)]
# Perform principal components on these variables with the preProcess() function from the caret package.
preProcess(training_il, method="pca", thresh=0.90)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
View(training)
View(testing)
View(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(training)
View(testing)
View(training)
class(1)
class(TRUE)
show
dgamma
help(dgamma)
help(show)
help(dgamma)
help(lm)
help(colSums)
colSums
lm
dgamma
show
getMethod("readPileup", "connection")
predict
method(predict)
methods(predict)
methods(lm)
methods()
methods(dgamma)
methods(lm)
methods(colSums)
methods(show
}
methods(show)
dir()
wd
wd javascript:;
dir()
wd Dropbox
wd("Dropbox")
wd "Dropbox"
help(wd)
??wd
setwd("~/Dropbox/Coursera+edx/DevDataProduct")
dir()
setwd("shinyTest")
dir
dir()
runApp()
dir
dir()
library(UsingR)
runApp()
library(shiny)
runApp()
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
data()
View(galton)
View(iq)
data(iq)
iq
shiny::runApp()
hist(galton$child, xlab='child height', col='lightblue',main='Child')
hist(galton$parent, xlab='parent height', col='lightblue',main='Parent')
hist(galton$child, xlab='child height', col='lightblue',main='Child')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(galton)
View(galton)
shiny::runApp()
iris
shiny::runApp()
show(input$species)
shiny::runApp()
iris[$Species = "virginica"]
iris[iris$Species = "virginica"]
iris$Species
iris[1,]
iris[iris$Species == "virginica"]
iris["Species" == "virginica"]
iris["Species" == "virginica",]
iris[iris$Species == "virginica",]
subset(iris, Species == virginica)
subset(iris, Species == 'virginica')
shiny::runApp()
View(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(plot)
shiny::runApp()
subset(iris, Species == 'setosa')
subset(iris, Species == c('setosa', 'virginica'))
shiny::runApp()
shiny::runApp()
unclass(data$Species)
unclass(iris$Species)
c("red", "green3", "blue")[unclass(iris$Species)]
shiny::runApp()
help("subset")
data = subset(iris, Species == c("setosa"))
data = iris[iris$Species == c("setosa"),]
iris[iris$Species == c("setosa"),]
iris[iris$Species == c("setosa", "virginica"),]
data = iris[iris$Species == c("setosa", "virginica"),]
iris
data = subset(iris, Species == "setosa" | Species == "virginica"))
data = subset(iris, Species == "setosa" | Species == "virginica")
subset(iris, Species %in% input$species)
shiny::runApp()
summary(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
